$> VBoxManage guestproperty enumerate winserver2003
# VBoxManage list vms

Бекап виртуальной машины
root@ubuntu-ann-bobov:~# VBoxManage list vms
"windak" {46410dc6-5f76-43fa-9fe8-c9e9bf35e18d}

ubuntu@ubuntu-ann-bobov:~$ vboxmanage export windak -o windak.ova
0%...
vboxmanage import windak.ova

1)
jocker@ubuntu:/root$ VBoxManage createvm --name "virt_pbx" --register
Virtual machine 'virt_pbx' is created and registered.
UUID: aa8e4d38-f617-47ac-a236-8c160ee08346
Settings file: '/home/jocker/VirtualBox VMs/virt_pbx/virt_pbx.vbox'
2)
jocker@ubuntu:/root$ VBoxManage modifyvm "virt_pbx" --memory 512 --acpi on --boot1 dvd
3)
jocker@ubuntu:/root$ VBoxManage modifyvm "virt_pbx" --nic1 bridged --bridgeadapter1 eth0
4)
jocker@ubuntu:/root$ VBoxManage modifyvm "virt_pbx" --ostype Linux
5)
jocker@ubuntu:~/VirtualBox VMs/virt_pbx$ VBoxManage createhd --filename ./virt_pbx.vdi --size 40000
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Disk image created. UUID: 9bffb726-1072-4ed1-b760-56e3a274767c
6)
jocker@ubuntu:~/VirtualBox VMs/virt_pbx$ VBoxManage storagectl "virt_pbx" --name "IDE Controller" --add ide
7)
jocker@ubuntu:~/VirtualBox VMs/virt_pbx$ VBoxManage storageattach "virt_pbx" --storagectl "IDE Controller" --port 0 --device 0 --type hdd --medium ./virt_pbx.vdi
8)

VBoxManage storageattach "io" --storagectl "IDE Controller" \
    --port 1 --device 0 --type dvddrive --medium debian-6.0.2.1-i386-CD-1.iso


START:
VBoxHeadless --startvm "io" &
This starts the VM and a remote desktop server. Redirect RDP port if necessary,
ssh -L 3389:127.0.0.1:3389 <host>

SHUT DOWN
VBoxManage controlvm "io" poweroff

Remove install Media,
VBoxManage modifyvm "io" --dvd none

Alternatively install OS using the GUI, configure it then export is as an appliance upload to the server then import it using,
VBoxManage export "io" --output ioClone.ovf OVA - FOR ONE FILE
VBoxManage import ioClone.ovf

Starting the VM,
VBoxHeadless --startvm "io" --vrde off &
This starts the VM without remote desktop support.

Delete the VM,
VBoxManage unregistervm io --delete

Mount Guest Additions
VBoxManage storageattach "io" --storagectl "IDE Controller" \
    --port 1 --device 0 --type hdd --medium /usr/share/virtualbox/VBoxGuestAdditions.iso

Install Guest Additions,
mkdir /mnt/dvd
mount -t iso9660 -o ro /dev/dvd /mnt/dvd
cd /mnt/dvd
./VBoxLinuxAdditions.run

Adding/removing shared folders,
vboxmanage sharedfolder add "io" --name share-name --hostpath /path/to/folder/ --automount
vboxmanage sharedfolder remove "io" --name share-name

To mount it on the guest,
sudo mount -t vboxsf -o uid=$UID share-name /path/to/folder/share/





sudo usermod -a -G vboxusers user USB USB USB

Manual mounting

You can mount the shared folder from inside a VM the same way as you would mount an ordinary network share:

    *

      In a Windows guest, shared folders are browseable and therefore visible in Windows Explorer. So, to attach the host's shared folder to your Windows guest, open Windows Explorer and look for it under "My Networking Places" -> "Entire Network" -> "VirtualBox Shared Folders". By right-clicking on a shared folder and selecting "Map network drive" from the menu that pops up, you can assign a drive letter to that shared folder.

      Alternatively, on the Windows command line, use the following:

      net use x: \\vboxsvr\sharename

      While vboxsvr is a fixed name (note that vboxsrv would also work), replace "x:" with the drive letter that you want to use for the share, and sharename with the share name specified with VBoxManage.
    *

      In a Linux guest, use the following command:

      mount -t vboxsf [-o OPTIONS] sharename mountpoint

      To mount a shared folder during boot, add the following entry to /etc/fstab:

      sharename   mountpoint   vboxsf   defaults  0   0

    *

      In a Solaris guest, use the following command:

      mount -F vboxfs [-o OPTIONS] sharename mountpoint

      Replace sharename (use lowercase) with the share name specified with VBoxManage or the GUI, and mountpoint with the path where you want the share to be mounted on the guest (e.g. /mnt/share). The usual mount rules apply, that is, create this directory first if it does not exist yet.

      Here is an example of mounting the shared folder for the user "jack" on Solaris:

      $ id
      uid=5000(jack) gid=1(other)
      $ mkdir /export/home/jack/mount
      $ pfexec mount -F vboxfs -o uid=5000,gid=1 jackshare /export/home/jack/mount
      $ cd ~/mount
      $ ls
      sharedfile1.mp3 sharedfile2.txt
      $

      Beyond the standard options supplied by the mount command, the following are available:

      iocharset CHARSET

      to set the character set used for I/O operations (utf8 by default) and

      convertcp CHARSET

      to specify the character set used for the shared folder name (utf8 by default).

      The generic mount options (documented in the mount manual page) apply also. Especially useful are the options uid, gid and mode, as they allow access by normal users (in read/write mode, depending on the settings) even if root has mounted the filesystem.
