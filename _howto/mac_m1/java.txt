
$ /usr/libexec/java_home -V
Matching Java Virtual Machines (2):
    17.0.6 (arm64) "Amazon.com Inc." - "Amazon Corretto 17" /Users/jocker/Library/Java/JavaVirtualMachines/corretto-17.0.6/Contents/Home
    11.0.13 (arm64) "Azul Systems, Inc." - "Zulu 11.52.13" /Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home
/Users/jocker/Library/Java/JavaVirtualMachines/corretto-17.0.6/Contents/Home

$ /usr/libexec/java_home -v11
/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home


$ export JAVA_HOME=$(/usr/libexec/java_home -v11)
$ javac -version
javac 11.0.13

---
Сохранить можно прямо из браузера сертификат, чтобы импортнуть в хранилище

Посмотреть cacerts
The default password of the keystore is: changeit.

cd /Users/jocker/Library/Java/JavaVirtualMachines/corretto-17.0.6/Contents/Home/lib/security
cd $JAVA_HOME/lib/security

keytool -list -keystore cacerts

Импортнуть java cacerts
keytool -importcert -alias hybris -file /Users/jocker/Downloads/hybris.pem -keystore cacerts

Проверить импорт
keytool -v -list -keystore cacerts -alias hybris
---

Сменить java

1 - Install Homebrew.

$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

2 - Install Homebrew Cask.

$ brew tap homebrew/cask-versions 
$ brew update 
$ brew tap homebrew/cask

3 - Install the latest version of Java

$ brew cask install java

4 - Install the other needed versions of Java (Java8, Java11, Java13).

$ brew tap adoptopenjdk/openjdk

$ brew cask install adoptopenjdk8
$ brew cask install adoptopenjdk11
$ brew cask install adoptopenjdk13
$ brew cask install adoptopenjdk14

5 - Switch between different versions of Java

Switching between different versions of Java, you only need to add the following to your .bash_profile or .zshrc.

In this case, we want to be able to switch between Java8, Java11, Java13 and Java14:

export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
export JAVA_13_HOME=$(/usr/libexec/java_home -v13)
export JAVA_14_HOME=$(/usr/libexec/java_home -v14)

alias java8='export JAVA_HOME=$JAVA_8_HOME'
alias java11='export JAVA_HOME=$JAVA_11_HOME'
alias java13='export JAVA_HOME=$JAVA_13_HOME'
alias java14='export JAVA_HOME=$JAVA_14_HOME'

# default to Java 14
java14

6 - Reload .bash_profile or .zshrc for the aliases to take effect:

$ source ~/.bash_profile

or

$ source ~/.zshrc

7 - Finally you can use the aliases to switch between different Java versions.

$ java8
$ java -version
java version "1.8.0_261"


---
можно азул взять жаву
https://www.azul.com/downloads/?os=macos&architecture=arm-64-bit&package=jdk

In $JRE/lib/security/java.security:
у меня это /Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/conf/security/java.security
jdk.tls.disabledAlgorithms=SSLv3, TLSv1, RC4, DES, MD5withRSA, DH keySize < 1024, \
EC keySize < 224, 3DES_EDE_CBC, anon, NULL

This line is enabled, after I commented out this line, everything is working fine. Apparently after/in jre1.8.0_181 this line is enabled.

The problem also appears with the latest openjdk 11 versions (11.0.11+9-0ubuntu2~18.04). What I don't understand is, why don't java and mysql just agree on using TLSv1.2, since both parties seem to support it? Also, just patching the java.security file isn't a long term solution, what's the way forward with this issue?

-Djava.security.properties=${PATH_TO_FILE?}/custom.java.security
jdk.tls.disabledAlgorithms=SSLv3, TLSv1.1, RC4, DES, MD5withRSA, \
    DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, \
    include jdk.disabled.namedCurves
I removed TLSv1 from the list.



LINUX
In my case I am runnig Centos 8 and had the same issue with Imap/Java. Had to update the system-wide cryptographic policy level.
    update-crypto-policies --set LEGACY
    reboot machine.
---

Even though JRE 8 is installed on my MAC -" No Java Runtime present,requesting to install " gets displayed in terminal

ДО:
iMac:platform jocker$ /usr/libexec/java_home
The operation couldn’t be completed. Unable to locate a Java Runtime.

ПОСЛЕ:
iMac:deploy-platform jocker$ /usr/libexec/java_home
/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home

mac os:
echo $JAVA_HOME
which java
$(dirname $(readlink $(which javac)))/java_home
/usr/libexec/java_home

java -XshowSettings:properties -version
java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home'



2021 solution
TL;DR

brew install temurin

Details

On an M1 Mac/Apple Silicon (running Big Sur), I had already openjdk installed. As signaled in a previous answer by Mohammed, openjdk is keg-only with brew, and hence requires adding a symlink.

After following this, it solved the No Java Runtime present error, but rJava was complaining about missing libjvm.dylib and that existing libraries were for the wrong architecture:

.onLoad failed in loadNamespace() for 'rJava', details:
  call: dyn.load(jvm, FALSE)
  error: unable to load shared object '/opt/homebrew/Cellar/openjdk/16.0.2/libexec/openjdk.jdk/Contents/Home/lib/server/libjvm.dylib':
  dlopen(/opt/homebrew/Cellar/openjdk/16.0.2/libexec/openjdk.jdk/Contents/Home/lib/server/libjvm.dylib, 10): 
    no suitable image found.  Did find:
    /opt/homebrew/Cellar/openjdk/16.0.2/libexec/openjdk.jdk/Contents/Home/lib/server/libjvm.dylib: 
    mach-o, but wrong architecture

Installing Eclipse Temurin (previously AdoptOpenJDK) (and removing the previously created symlink in /Library/Java/JavaVirtualMachines/openjdk.jdk) immediately solved both issues seamlessly.

Just run brew install temurin and everything should be OK.
